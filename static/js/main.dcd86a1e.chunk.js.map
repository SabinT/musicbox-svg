{"version":3,"sources":["model/MidiEvents.ts","model/MidiConstants.ts","model/MidiFile.ts","components/MidiNoteHistogram.tsx","components/MidiFilePicker.tsx","utilities/MidiJsonConverter.ts","components/MusicBoxSvg.tsx","model/IMusicBoxProfile.ts","components/MusicBoxProfileEditor.tsx","components/MusicBoxSvgFormatEditor.tsx","MusicBoxSheetGenerator.tsx","serviceWorker.ts","index.tsx"],"names":["MidiEventType","ChannelMessageType","BaseMidiEvent","deltaTime","absTimeSeconds","this","MidiNote","MIDIMetaMessageType","MidiFileFormat","MidiTimingScheme","ChannelMidiEvent","channelMessageType","None","channel","Channel","NoteMidiEvent","note","velocity","ControllerMidiEvent","controller","value","ProgramChangeMidiEvent","program","ChannelPressureMidiEvent","PitchBendMidiEvent","MetaMidiEvent","metaMessageType","Meta","MidiHeader","dataView","startOffset","chunkLength","fileFormat","multiTrack","numTracks","rawTimingData","timingScheme","metrical","pulsesPerQuarterNote","framesPerSecond","subFrameResolution","parseFromRawData","format","getUint16","MidiTrack","header","dataStartOffset","midiStats","events","currentOffset","done","cumulativeSeconds","secondsPerTick","usesMetricalTiming","secondsPerTickValues","length","previousStatusByte","deltaTimeCurrentByte","getUint8","statusByte","messageType","NoteOff","PitchBend","channelNumber","midiEvent","NoteOn","PolyphonicPressure","collectNoteStats","Controller","ControllerChangeMidiEvent","ProgramChange","ChannelPressure","Error","push","EndOfTrack","SetTempo","bpm","tempos","currentCount","noteHistogram","get","set","lastNoteOnEventInSeconds","highNote","lowNote","MidiFile","chunks","tracks","getInitialMidiStats","buffer","currentPos","DataView","byteLength","chunkType","getStringFromBuffer","getUint32","chunkDataStartOffset","track","Map","start","end","slice","String","fromCharCode","apply","Array","from","Uint8Array","MidiNoteHistogram","props","stats","noteRange","noteWidth","width","bars","noteAxis","maxNoteCount","sparseAxis","friendlyNote","replace","xPosition","noteCount","key","x","y","height","fill","Colors","BLUE1","shouldSkipNoteInAxis","textX","transform","fontSize","yScale","MidiFilePicker","state","fileName","midiFile","ev","preventDefault","dataTransfer","items","i","kind","file","getAsFile","openFile","files","event","target","currentTarget","setState","name","reader","FileReader","onload","onFileLoaded","result","ArrayBuffer","loadFromBuffer","readAsArrayBuffer","stopPropagation","content","action","text","buttonText","onInputChange","handleInputChange","tempoInfo","map","parseFloat","toFixed","join","ellipsize","icon","title","description","id","onDrop","dropHandler","onDragOver","dragOverHandler","className","React","MidiJsonConverter","JSON","stringify","prettyPrintReplacer","MusicBoxSvg","svgRefs","numPages","errors","page","svgRef","outerHTML","pages","paginateEvents","mbProfile","musicBoxProfile","supportedNotes","noteGap","contentWidthMm","noteOffsetY","paperWidthMm","noteIndices","sort","forEach","totalPaperLength","p","endTimeInSeconds","startTimeInSeconds","millimetersPerSecond","intent","e","generateSvgForPage","error","xLen","yLen","svgXLength","holeDiameterMm","formatOptions","formatting","drawLeadingBorder","omitPageBoundaries","pageNum","drawTrailingBorder","ref","el","xmlns","renderBorder","renderSvgLineMm","loopMode","calculateStartSkew","renderLeadingBorder","renderTrailingBorder","midiEvents","noteOnEvent","noteIndex","cx","cy","r","stroke","createCircle","isFirstPage","skewMm","renderJigsawJoiner","startPaddingMm","isLastPage","x1","y1","x2","y2","xStart","profile","a","b","h","points","lines","q","supportedNoteSet","Set","supportedEvents","unsupportedEvents","getTracks","filterNotes","pageLengthInSeconds","Infinity","pageWidthMm","currentPage","secondsPerHoleRadius","minNoteGapSeconds","minNoteGapMm","currentNoteIndex","skippedNotes","skipCount","previousNoteEvent","noteEvent","maxPageEndTime","optimalPageEndTime","pageEndTime","secsRemainingOnLastPage","midiHeader","getHeader","midiTracks","noteOnEvents","filter","transposeMemo","transposedCount","lastAbsoluteTime","transposeOutOfRangeNotes","has","transposeCandidate","suppNote","transposed","BuiltInProfiles","C4","D4","E4","F4","G4","A4","B4","C5","D5","E5","F5","G5","A5","B5","C6","C3","D3","G3","A3","B3","Fs4","Gs4","As4","Cs5","Ds5","Fs5","Gs5","As5","D6","E6","MusicBoxProfileEditor","useState","setProfile","menuItems","onClick","profileKey","newProfile","onChange","onSelectProfile","profileSelectionMenu","profileSelectionPopOver","position","Position","BOTTOM","onValueChange","num","str","MusicBoxSvgFormatEditor","options","setOptions","checked","label","CREDITS","asset","by","MusicBoxSheetGenerator","musicBoxSvgRef","midiJson","midiDataAvailable","musicBoxSvgFormatOptions","showMidiJson","credits","filePicker","filename","onMidiDataLoaded","paperSettings","formatSettings","animate","renderActiveTabPanelOnly","vertical","panel","Expander","elementId","style","minWidth","downloadSvgs","toggleDebugMessage","copyMidiJson","isOpen","href","GetJson","getNumPages","svgData","getSvg","svgBlob","Blob","type","svgUrl","URL","createObjectURL","downloadLink","document","createElement","midiFileName","download","body","appendChild","click","removeChild","navigator","clipboard","writeText","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.dcd86a1e.chunk.js","sourcesContent":["import { MidiNote } from \"./MidiConstants\";\r\n\r\nexport enum MidiEventType {\r\n    /**\r\n     * First byte of Midi event being `0x8n - 0xEn` indicates this type (4-bit n = channel number)\r\n     * This type includes \"music\" events that includes note on/off and controller change.\r\n     */\r\n    Channel = 1,\r\n    /**\r\n     * Indicated by first byte of Midi event being `0xF0` (single byte status) or `0xF7` (multi byte\r\n     * SysEx message - used to send escape sequences).\r\n     */\r\n    SysEx = 2,\r\n    /**\r\n     * Indicated by first byte of Midi event being `0xFF`.\r\n     * These contain additional information which would not be in the MIDI data stream itself.\r\n     * (e.g., TimeSig, KeySig, Tempo, TrackName, Text, Marker, Special, End of Track, etc.)\r\n     */\r\n    Meta = 3\r\n}\r\n\r\n/**\r\n * Represents a timed event in a track, comprising of a variable-length `deltaTime`, and variable-\r\n * length event data.\r\n *\r\n * The first byte of Midi event data after `deltaTime` (also referred to as the event's status byte,\r\n * and identifiable by bit 7 being set) identifies the event type.\r\n *\r\n * If status byte is less than 128 (hex 80), this implies that running status is in\r\n * effect, and that this byte is actually the first data byte (the status carrying over from the\r\n * previous MIDI event). This can only be the case if the immediately previous event was also a\r\n * MIDI event, i.e. SysEx and Meta events interrupt (clear) running status.\r\n */\r\nexport interface IMidiEvent {\r\n    /**\r\n     * A variable length quantity, (1 to 4 bytes) denoting the time since the previous event.\r\n     * Unit depends on timing scheme used by the MIDI file.\r\n     *\r\n     * Only the bottom 7 bits of each of these bytes contributes towards the delta-time, the top bit\r\n     * being used to indicate (when it is set) that another byte follows, i.e. bit 7 of each byte is\r\n     * used to indicate continuation or end of the delta-time data. Consequently the last byte of\r\n     * any delta-time value will have its top bit clear.\r\n     * E.g., the hex number `4000` is represented by three bytes as `81 80 00`\r\n     */\r\n    deltaTime: number;\r\n\r\n    getMidiEventType(): MidiEventType;\r\n\r\n    /**\r\n     * Not a part of the MIDI format, but included here for convenience\r\n     */\r\n    absTimeSeconds: number;\r\n}\r\n\r\nexport abstract class BaseMidiEvent implements IMidiEvent {\r\n    public deltaTime: number;\r\n    public absTimeSeconds: number = 0;\r\n\r\n    constructor(deltaTime: number) {\r\n        this.deltaTime = deltaTime;\r\n    }\r\n\r\n    abstract getMidiEventType(): MidiEventType;\r\n}\r\n\r\n/**\r\n * Different types of Channel messages. See below for reference:\r\n * https://www.midi.org/specifications-old/item/table-1-summary-of-midi-message\r\n * \r\n * All channel messages have a status byte of the format xxxxnnnn, where xxxx identifies message\r\n * type, and nnnn identifies the channel.\r\n * \r\n * The value of the enum corresponds to the top nibble of message type (xxxx).\r\n */\r\nexport enum ChannelMessageType {\r\n    /** Do not use, used to indicate unassigned.*/\r\n    None = 0,\r\n\r\n    /**\r\n     * This message is sent when a note is released (ended).\r\n     * Data bytes: `0kkkkkkk, 0vvvvvvv`, where `kkkkkkk` = key/note number, `vvvvvvv` = velocity.\r\n     */\r\n    NoteOff = 0b1000,\r\n\r\n    /**\r\n     * This message is sent when a note is depressed (start).\r\n     * Data bytes: `0kkkkkkk, 0vvvvvvv`, where `kkkkkkk` = key/note number, `vvvvvvv` = velocity.\r\n     */\r\n    NoteOn = 0b1001,\r\n\r\n    /**\r\n     * This message is most often sent by pressing down on the key after it \"bottoms out\".\r\n     * Data: `0kkkkkkk 0vvvvvvv`\r\n     * `kkkkkkk` is the key (note) number. `vvvvvvv` is the pressure value.\r\n     */\r\n    PolyphonicPressure = 0b1010,\r\n\r\n    /**\r\n     * This message is sent when a controller value changes.\r\n     * Controllers include devices such as pedals and levers.\r\n     * Controller numbers 120-127 are reserved as \"Channel Mode Messages\".\r\n     * Data: `0ccccccc 0vvvvvvv`\r\n     * `ccccccc` is the controller number (0-119). `vvvvvvv` is the controller value (0-127).\r\n     */\r\n    Controller = 0b1011,\r\n\r\n    /**\r\n     * This message sent when the patch number changes.\r\n     * Data byte: `0ppppppp` 7-bit program number.\r\n     */\r\n    ProgramChange = 0b1100,\r\n\r\n    /**\r\n     * This message is most often sent by pressing down on the key after it \"bottoms out\".\r\n     * This message is different from polyphonic after-touch. Use this message to send the single\r\n     * greatest pressure value (of all the current depressed keys).\r\n     * Data: (0vvvvvvv) is the pressure value.\r\n     */\r\n    ChannelPressure = 0b1101,\r\n\r\n    /**\r\n     * This message is sent to indicate a change in the pitch bender (wheel or lever, typically).\r\n     * The pitch bender is measured by a fourteen bit value.\r\n     * Center (no pitch change) is 2000H. Sensitivity is a function of the receiver, but may be set\r\n     * using RPN 0.\r\n     * Data bytes: `0lllllll 0mmmmmmm`\r\n     * `lllllll` are the least significant 7 bits. `mmmmmmm` are the most significant 7 bits.\r\n     */\r\n    PitchBend = 0b1110\r\n}\r\n\r\nexport class ChannelMidiEvent extends BaseMidiEvent {\r\n    public channelMessageType: ChannelMessageType = ChannelMessageType.None;\r\n\r\n    public channel: number = 0;\r\n\r\n    public getMidiEventType() {\r\n        return MidiEventType.Channel;\r\n    }\r\n}\r\n\r\nexport class NoteMidiEvent extends ChannelMidiEvent {\r\n    public note: MidiNote = 0;\r\n    public velocity: number = 0;\r\n}\r\n\r\nexport class ControllerMidiEvent extends ChannelMidiEvent {\r\n    public controller: number = 0;\r\n    public value: number = 0;\r\n}\r\n\r\nexport class ProgramChangeMidiEvent extends ChannelMidiEvent {\r\n    public program: number = 0;\r\n}\r\n\r\nexport class ChannelPressureMidiEvent extends ChannelMidiEvent {\r\n    public velocity: number = 0;\r\n}\r\n\r\nexport class PitchBendMidiEvent extends ChannelMidiEvent {\r\n    public value: number = 0;\r\n}\r\n\r\nexport class MetaMidiEvent extends BaseMidiEvent {\r\n    public metaMessageType: number = 0;\r\n\r\n    public getMidiEventType() {\r\n        return MidiEventType.Meta;\r\n    }\r\n}","/**\r\n * MIDI numbers for various notes. A4 is the 440 Hz \"tuning\" note.\r\n * Letter 'n' in enum name indicates negative octave (e.g., `Cn1` = C, octave -1)\r\n * Letter 's' indicates 'sharp' (e.g., `Cs3` = C# 3)\r\n * \r\n * Note: octave numbering might differ by one, depending on the program.\r\n */\r\nexport enum MidiNote {\r\n    None = -1,\r\n    Cn1 = 0,\r\n    Csn1 = 1,\r\n    Dn1 = 2,\r\n    Dsn1 = 3,\r\n    En1 = 4,\r\n    Fn1 = 5,\r\n    Fsn1 = 6,\r\n    Gn1 = 7,\r\n    Gsn1 = 8,\r\n    An1 = 9,\r\n    Asn1 = 10,\r\n    Bn1 = 11,\r\n    C0 = 12,\r\n    Cs0 = 13,\r\n    D0 = 14,\r\n    Ds0 = 15,\r\n    E0 = 16,\r\n    F0 = 17,\r\n    Fs0 = 18,\r\n    G0 = 19,\r\n    Gs0 = 20,\r\n    A0 = 21,\r\n    As0 = 22,\r\n    B0 = 23,\r\n    C1 = 24,\r\n    Cs1 = 25,\r\n    D1 = 26,\r\n    Ds1 = 27,\r\n    E1 = 28,\r\n    F1 = 29,\r\n    Fs1 = 30,\r\n    G1 = 31,\r\n    Gs1 = 32,\r\n    A1 = 33,\r\n    As1 = 34,\r\n    B1 = 35,\r\n    C2 = 36,\r\n    Cs2 = 37,\r\n    D2 = 38,\r\n    Ds2 = 39,\r\n    E2 = 40,\r\n    F2 = 41,\r\n    Fs2 = 42,\r\n    G2 = 43,\r\n    Gs2 = 44,\r\n    A2 = 45,\r\n    As2 = 46,\r\n    B2 = 47,\r\n    C3 = 48,\r\n    Cs3 = 49,\r\n    D3 = 50,\r\n    Ds3 = 51,\r\n    E3 = 52,\r\n    F3 = 53,\r\n    Fs3 = 54,\r\n    G3 = 55,\r\n    Gs3 = 56,\r\n    A3 = 57,\r\n    As3 = 58,\r\n    B3 = 59,\r\n    C4 = 60,\r\n    Cs4 = 61,\r\n    D4 = 62,\r\n    Ds4 = 63,\r\n    E4 = 64,\r\n    F4 = 65,\r\n    Fs4 = 66,\r\n    G4 = 67,\r\n    Gs4 = 68,\r\n    A4 = 69,\r\n    As4 = 70,\r\n    B4 = 71,\r\n    C5 = 72,\r\n    Cs5 = 73,\r\n    D5 = 74,\r\n    Ds5 = 75,\r\n    E5 = 76,\r\n    F5 = 77,\r\n    Fs5 = 78,\r\n    G5 = 79,\r\n    Gs5 = 80,\r\n    A5 = 81,\r\n    As5 = 82,\r\n    B5 = 83,\r\n    C6 = 84,\r\n    Cs6 = 85,\r\n    D6 = 86,\r\n    Ds6 = 87,\r\n    E6 = 88,\r\n    F6 = 89,\r\n    Fs6 = 90,\r\n    G6 = 91,\r\n    Gs6 = 92,\r\n    A6 = 93,\r\n    As6 = 94,\r\n    B6 = 95,\r\n    C7 = 96,\r\n    Cs7 = 97,\r\n    D7 = 98,\r\n    Ds7 = 99,\r\n    E7 = 100,\r\n    F7 = 101,\r\n    Fs7 = 102,\r\n    G7 = 103,\r\n    Gs7 = 104,\r\n    A7 = 105,\r\n    As7 = 106,\r\n    B7 = 107,\r\n    C8 = 108,\r\n    Cs8 = 109,\r\n    D8 = 110,\r\n    Ds8 = 111,\r\n    E8 = 112,\r\n    F8 = 113,\r\n    Fs8 = 114,\r\n    G8 = 115,\r\n    Gs8 = 116,\r\n    A8 = 117,\r\n    As8 = 118,\r\n    B8 = 119,\r\n    C9 = 120,\r\n    Cs9 = 121,\r\n    D9 = 122,\r\n    Ds9 = 123,\r\n    E9 = 124,\r\n    F9 = 125,\r\n    Fs9 = 126,\r\n    G9 = 127\r\n}\r\n\r\n/** Message types for MIDI meta messages (status byte 0xFF) */\r\nexport enum MIDIMetaMessageType {\r\n    /** 2 bytes length, The number of a sequence, occurs at delta time 0 */\r\n    SequenceNumber = 0x00,\r\n\r\n    /** variable length, Some text, occurs anywhere in the track */\r\n    Text = 0x01,\r\n\r\n    /** variable length, A copyright notice, occurs at delta time 0 in the first track */\r\n    CopyrightNotice = 0x02,\r\n\r\n    /** variable length, A track name, occurs at delta time 0 */\r\n    TrackName = 0x03,\r\n\r\n    /** variable length, The name of an instrument in the current track, occurs anywhere in the track */\r\n    InstrumentName = 0x04,\r\n\r\n    /** variable length, Lyrics, usually a syllable per quarter note, occurs anywhere in the track */\r\n    Lyrics = 0x05,\r\n\r\n    /** variable length, The text of a marker, occurs anywhere in the track */\r\n    Marker = 0x06,\r\n\r\n    /** variable length, The text of a cue, usually to prompt for some action from the user, occurs anywhere in the track */\r\n    CuePoint = 0x07,\r\n\r\n    /** 1 byte length, A channel number (following meta events will apply to this channel), occurs anywhere in the track */\r\n    ChannelPrefix = 0x20,\r\n\r\n    /** 0 byte length,   length, At the end of each track */\r\n    EndOfTrack = 0x2F,\r\n\r\n    /** 3 byte length, The number of microseconds per beat, occurs anywhere in the track, but usually in the first track */\r\n    SetTempo = 0x51,\r\n\r\n    /** 5 byte length, SMPTE time to denote playback offset from the beginning, occurs anywhere in the track */\r\n    SmpteOffset = 0x54,\r\n\r\n    /** 4 byte length, Time signature, metronome clicks, and size of a beat in 32nd notes, occurs anywhere in the track */\r\n    TimeSignature = 0x58,\r\n\r\n    /** 2 byte length, A key signature, occurs anywhere in the track */\r\n    KeySignature = 0x59,\r\n\r\n    /** variable length, Something specific to the MIDI device manufacturer, occurs anywhere in the track */\r\n    SequencerSpecific = 0x7F\r\n}","import { IMidiEvent, ChannelMessageType, NoteMidiEvent, ControllerMidiEvent as ControllerChangeMidiEvent, ProgramChangeMidiEvent, ChannelPressureMidiEvent, PitchBendMidiEvent, MetaMidiEvent } from \"./MidiEvents\";\r\nimport { MIDIMetaMessageType, MidiNote } from \"./MidiConstants\";\r\n\r\n/**\r\n * A valid MIDI file will contain a single Header chunk followed by one or more Track chunks.\r\n * Each chunk has an 8 byte header that identifies which type it is, and gives the size of its associated data :\r\n * bytes 0 - 3 : identifier (either 'MThd' or 'MTrk')\r\n * bytes 4 - 7 : chunklen (the number of bytes comprising the following data)\r\n * Chunks with unrecognized identifier should be skipped (anything other than 'MThd' or 'MTrk').\r\n *\r\n * All multi-byte data is big-endian.\r\n */\r\nexport interface IMidiChunk {\r\n    /**\r\n     * Parses out the chunk from a raw MIDI buffer given the start offset and length in bytes.\r\n     * @param dataView The raw MIDI data buffer\r\n     * @param dataStartOffset The byte position within `dataView`, where the chunk data (after the\r\n     *      8-byte header) starts.\r\n     * @param chunkLength Total byte length of the chunk\r\n     * @param midiStats A data structure that facilitates gathering useful info while parsing (optional).\r\n     */\r\n    parseFromRawData(dataView: DataView, dataStartOffset: number, chunkLength: number, midiStats?: IMidiStats): void;\r\n}\r\n\r\nexport enum MidiFileFormat {\r\n    /**\r\n     * The MIDI file contains just a single MTrk chunk, that can potentially contain multi-channel\r\n     * MIDI data.\r\n     */\r\n    singleTrack = 0,\r\n\r\n    /**\r\n     * The file contains two or more MTrk chunks (as specified by the following parameter, ntracks)\r\n     * that are to be played simultaneously, i.e. analogous to a mulitrack tape recorder. The first\r\n     * track is a tempo track that should only contain tempo related Meta events (i.e. no actual\r\n     * MIDI data). This is the most commonly used format, as the various instrumental parts within a\r\n     * composition can be stored in separate tracks, allowing for easier editing. It is possible to\r\n     * store multi-channel data in a track, though it is more usual to keep data relevant to a\r\n     * single MIDI channel in each track.\r\n     */\r\n    multiTrack = 1,\r\n\r\n    /**\r\n     * Not very popular, don't care.\r\n     */\r\n    Type2 = 2,\r\n}\r\n\r\nexport enum MidiTimingScheme {\r\n    /** Timing of events is determined by beats per minute/pulses per quarter note, etc. */\r\n    metrical = 0,\r\n\r\n    /** Absolute time is used in Midi events. */\r\n    timecode = 1,\r\n}\r\n\r\n/**\r\n * The Header chunk (identifier = MThd) has a fixed length and contains a few global properties\r\n * pertaining to the file as a whole. It should be the first chunk in the file, and this should be\r\n * the only occurrence. Although the Header chunk currently always contains 6 bytes of data\r\n * (i.e., chunklen = 6), this should not be assumed (i.e., the chunklen value should always be read\r\n * and acted upon, to allow for possible future extension to the standard).\r\n */\r\nexport class MidiHeader implements IMidiChunk {\r\n    /** Format of the MIDI file (type 0, 1, 2). Corresponds to first 16 bits of the header data. */\r\n    public fileFormat: MidiFileFormat = MidiFileFormat.multiTrack;\r\n\r\n    /**\r\n     * The number of MTrk chunks following this MThd chunk.\r\n     * For a format 0 MIDI file, ntracks can only be '1'.\r\n     * Second 16-bits of the header data.\r\n     */\r\n    public numTracks: number = 0;\r\n\r\n    /**\r\n     * Specifies the timing interval to be used, and whether timecode (Hrs.Mins.Secs.Frames) or\r\n     * metrical (Bar.Beat) timing is to be used. With metrical timing, the timing interval is tempo\r\n     * related, whereas with timecode the timing interval is in absolute time, and hence not related\r\n     * to tempo. This is the third 16 bytes of the header data.\r\n     */\r\n    public rawTimingData: number = 0;\r\n\r\n    /** Parsed from bit 15 of rawTimingDivision, 0 = Metrical, 1 = timecode. @see rawTimingDivision */\r\n    public timingScheme: MidiTimingScheme = MidiTimingScheme.metrical;\r\n\r\n    /**\r\n     * If @see timingScheme is @see MidiTimingScheme.Metrical, bits 0-14 of @see rawTimingDivision\r\n     * are a 15-bit number indicating the number of sub-divisions of a quarter note (a.k.a. pulses\r\n     * per quarter note, ppqn). A common value is 96, which would be represented in hex as `00 60`.\r\n     * You will notice that 96 is a nice number for dividing by 2 or 3 (with further repeated\r\n     * halving), so using this value for tickdiv allows triplets and dotted notes right down to\r\n     * hemi-demi-semiquavers to be represented.\r\n     */\r\n    public pulsesPerQuarterNote?: number;\r\n\r\n    /**\r\n     * If @see timingScheme is @see MidiTimingScheme.TimeCode, bits 8-15 of @see rawTimingDivision\r\n     * (i.e., the first byte) specify the number of frames per second (fps), and will be one of the\r\n     * four SMPTE standards: 24, 25, 29 or 30, though expressed as a negative value using 2's\r\n     * complement notation. (e.g, 24 is represented as `E8`)\r\n     */\r\n    public framesPerSecond?: number;\r\n\r\n    /**\r\n     * If @see timingScheme is @see MidiTimingScheme.TimeCode, bits 0 - 7 of @see rawTimingDivision\r\n     * (second byte) specify the sub-frame resolution (i.e.,  number of sub-divisions of a frame).\r\n     * Typical values are 4 (corresponding to MIDI Time Code), 8, 10, 80(corresponding to SMPTE bit\r\n     * resolution), or 100. A timing resolution of 1 ms can be achieved by specifying 25 fps and 40\r\n     * sub-frames, which would be encoded in hex as `E7 28`.\r\n     */\r\n    public subFrameResolution?: number;\r\n\r\n    constructor(dataView: DataView, startOffset: number, chunkLength: number) {\r\n        this.parseFromRawData(dataView, startOffset, chunkLength);\r\n    }\r\n\r\n    public parseFromRawData(dataView: DataView, startOffset: number, chunkLength: number) {\r\n        // First 16 bits\r\n        const format: MidiFileFormat =\r\n            dataView.getUint16(startOffset, /* littleEndian: */ false) as MidiFileFormat;\r\n\r\n        // Second 16 bits\r\n        const numTracks: number =\r\n            dataView.getUint16(startOffset + 2,  /* littleEndian: */ false);\r\n\r\n        // Third 16 bits\r\n        const rawTimingData = dataView.getUint16(startOffset + 4, /* littleEndian: */ false);\r\n\r\n        // Bit 15 = tickdiv\r\n        const timingScheme = rawTimingData & 0x8000 as MidiTimingScheme;\r\n\r\n        this.fileFormat = format;\r\n        this.rawTimingData = rawTimingData;\r\n        this.numTracks = numTracks;\r\n        this.timingScheme = timingScheme;\r\n\r\n        if (timingScheme === MidiTimingScheme.metrical) {\r\n            // Bits 0-14\r\n            this.pulsesPerQuarterNote = 0x7FFF & rawTimingData;\r\n        } else {\r\n            // Timing scheme is timecode.\r\n            // Bits 8 - 15, note: number is stored as 2's complement\r\n            this.framesPerSecond = ~(0xFF00 & rawTimingData) + 1;\r\n\r\n            // Bits 0 - 7\r\n            this.subFrameResolution = 0x00FF & rawTimingData;\r\n        }\r\n    }\r\n}\r\n\r\n/** Useful information gathered while parsing a MIDI file. */\r\nexport interface IMidiStats {\r\n    /** Tempos corresponding to all tempo change events encountered in all tracks. */\r\n    tempos: number[];\r\n\r\n    /** Raw representation of tempo for maximal accuracy */\r\n    secondsPerTickValues: number[];\r\n\r\n    /** Count of all notes encountered. */\r\n    noteHistogram: Map<MidiNote, number>;\r\n\r\n    /** Time in seconds for the last note on/off event. */\r\n    lastNoteOnEventInSeconds: number;\r\n\r\n    /** The lowest note encountered */\r\n    lowNote: MidiNote;\r\n\r\n    /** The highest note encountered */\r\n    highNote: MidiNote;\r\n}\r\n\r\n/**\r\n * Track chunks (identifier = MTrk) contain a sequence of time-ordered events (MIDI and/or sequencer\r\n * specific data), each of which has a delta time value associated with it - i.e. the amount of time\r\n * (specified in tickdiv units) since the previous event.\r\n * i.e., a track is sequence of 'delta-time / event' pairs\r\n * \r\n * Single track files (type 0) only have one track.\r\n * Multi-track files (type 1) contain multiple tracks, where the first track is a global tempo track\r\n * and subsequent tracks contain the actual note data but not timing events. All trasks are played\r\n * together and they all follow the tempo track.\r\n * Type 2 midi files allow timing events in any track.\r\n */\r\nexport class MidiTrack implements IMidiChunk {\r\n    public events: IMidiEvent[] = [];\r\n\r\n    // Used to calculate absolute timing data while parsing tracks\r\n    private header: MidiHeader;\r\n\r\n    constructor(header: MidiHeader, dataView: DataView, dataStartOffset: number, chunkLength: number, midiStats?: IMidiStats) {\r\n        this.header = header;\r\n        this.parseFromRawData(dataView, dataStartOffset, chunkLength, midiStats);\r\n    }\r\n\r\n    public parseFromRawData(dataView: DataView, dataStartOffset: number, chunkLength: number, midiStats?: IMidiStats): void {\r\n        let currentOffset = dataStartOffset;\r\n        let done: boolean = false;\r\n\r\n        let cumulativeSeconds = 0;\r\n        let secondsPerTick = 0;\r\n        const usesMetricalTiming = this.header.timingScheme === MidiTimingScheme.metrical;\r\n\r\n        // Tempo might have been set in a previous track, use the last seen value\r\n        if (midiStats && midiStats.secondsPerTickValues && midiStats.secondsPerTickValues.length > 0) {\r\n            secondsPerTick = midiStats.secondsPerTickValues[midiStats.secondsPerTickValues.length - 1];\r\n        } else if (usesMetricalTiming && this.header.pulsesPerQuarterNote) {\r\n            // Default tempo of 120 bpm if no tempo change event is present.\r\n            secondsPerTick = 60 / (120 * this.header.pulsesPerQuarterNote);\r\n        }\r\n\r\n        let previousStatusByte: number = 0;\r\n        while (!done && currentOffset < dataStartOffset + chunkLength) {\r\n            // Read delta time (big-endian sequence of 7-bit numbers)\r\n            // Top bit being set indicates another byte will follow.\r\n            let deltaTimeCurrentByte = dataView.getUint8(currentOffset++);\r\n\r\n            let deltaTime = deltaTimeCurrentByte & 0b01111111;\r\n            while (deltaTimeCurrentByte & 0b10000000) {\r\n                deltaTimeCurrentByte = dataView.getUint8(currentOffset++);\r\n                deltaTime = (deltaTime << 7) + (deltaTimeCurrentByte & 0b01111111);\r\n            }\r\n\r\n            if (usesMetricalTiming) {\r\n                cumulativeSeconds += secondsPerTick * deltaTime;\r\n            }\r\n\r\n            // Read status byte to find event type\r\n            let statusByte = dataView.getUint8(currentOffset++);\r\n\r\n            if (statusByte < 0x80) {\r\n                statusByte = previousStatusByte;\r\n            } else {\r\n                previousStatusByte = statusByte;\r\n            }\r\n\r\n            const messageType = (statusByte & 0b11110000) >> 4;\r\n\r\n            if (messageType >= ChannelMessageType.NoteOff\r\n                && messageType <= ChannelMessageType.PitchBend) {\r\n                // This is a channel message\r\n\r\n                const channelNumber = (statusByte & 0b00001111);\r\n\r\n                let midiEvent;\r\n                switch (messageType) {\r\n                    case ChannelMessageType.NoteOff:\r\n                    case ChannelMessageType.NoteOn:\r\n                    case ChannelMessageType.PolyphonicPressure:\r\n                        midiEvent = new NoteMidiEvent(deltaTime);\r\n                        midiEvent.note = dataView.getUint8(currentOffset++);\r\n                        midiEvent.velocity = dataView.getUint8(currentOffset++);\r\n\r\n                        if (messageType === ChannelMessageType.NoteOn && midiStats) {\r\n                            this.collectNoteStats(midiStats, midiEvent, cumulativeSeconds);\r\n                        }\r\n\r\n                        break;\r\n\r\n                    case ChannelMessageType.Controller:\r\n                        midiEvent = new ControllerChangeMidiEvent(deltaTime);\r\n                        midiEvent.controller = dataView.getUint8(currentOffset++);\r\n                        midiEvent.value = dataView.getUint8(currentOffset++);\r\n                        break;\r\n\r\n                    case ChannelMessageType.ProgramChange:\r\n                        midiEvent = new ProgramChangeMidiEvent(deltaTime);\r\n                        midiEvent.program = dataView.getUint8(currentOffset++);\r\n                        break;\r\n\r\n                    case ChannelMessageType.ChannelPressure:\r\n                        midiEvent = new ChannelPressureMidiEvent(deltaTime);\r\n                        midiEvent.velocity = dataView.getUint8(currentOffset++);\r\n                        break;\r\n\r\n                    case ChannelMessageType.PitchBend:\r\n                        midiEvent = new PitchBendMidiEvent(deltaTime);\r\n\r\n                        // TODO this is not the actual value, just reading bytes\r\n                        midiEvent.value = dataView.getUint16(currentOffset);\r\n                        currentOffset += 2;\r\n                        break;\r\n\r\n                    default:\r\n                        throw new Error(\"Unrecognized status byte: \" + statusByte);\r\n                }\r\n\r\n                if (usesMetricalTiming) {\r\n                    midiEvent.absTimeSeconds = cumulativeSeconds;\r\n                }\r\n\r\n                midiEvent.channelMessageType = messageType;\r\n                midiEvent.channel = channelNumber;\r\n                this.events.push(midiEvent);\r\n            } else if (statusByte >= 0b11110000 && statusByte <= 0b11110111) {\r\n                // SysEx messages\r\n                throw new Error('Not yet implemented');\r\n            } else if (statusByte >= 0b11111000 && statusByte < 0b11111111) {\r\n                // SysEx realtime messages\r\n                // Note: 0b11111111 is used as the status byte for \"System Reset\" in real-time contexts.\r\n                throw new Error('Not yet implemented');\r\n            } else if (statusByte === 0b11111111) {\r\n                // Meta messages: with the general format `FF type length data`\r\n                let midiEvent = new MetaMidiEvent(deltaTime);\r\n                midiEvent.metaMessageType = dataView.getUint8(currentOffset++);\r\n\r\n                const length = dataView.getUint8(currentOffset++);\r\n                if (midiEvent.metaMessageType === MIDIMetaMessageType.EndOfTrack && length === 0) {\r\n                    // This is the end of track marker.\r\n                    done = true;\r\n                }\r\n\r\n                if (midiEvent.metaMessageType === MIDIMetaMessageType.SetTempo\r\n                    && length === 3\r\n                    && usesMetricalTiming\r\n                    && this.header.pulsesPerQuarterNote) {\r\n                    // Tempo change\r\n                    const microsecondsPerQuarterNote =\r\n                        (dataView.getUint16(currentOffset) << 8) +\r\n                        dataView.getUint8(currentOffset + 2);\r\n                    secondsPerTick = microsecondsPerQuarterNote / (1000 * 1000 * this.header.pulsesPerQuarterNote);\r\n\r\n                    if (midiStats) {\r\n                        // Beats per minute\r\n                        const bpm = 60 / (secondsPerTick * this.header.pulsesPerQuarterNote);\r\n                        midiStats.tempos.push(bpm);\r\n                        midiStats.secondsPerTickValues.push(secondsPerTick);\r\n                    }\r\n                }\r\n\r\n                if (usesMetricalTiming) {\r\n                    midiEvent.absTimeSeconds = cumulativeSeconds;\r\n                }\r\n\r\n                this.events.push(midiEvent);\r\n\r\n                currentOffset += length;\r\n            }\r\n        }\r\n    }\r\n\r\n    private collectNoteStats(midiStats: IMidiStats, midiEvent: NoteMidiEvent, cumulativeSeconds: number) {\r\n        const currentCount = midiStats.noteHistogram.get(midiEvent.note) || 0;\r\n        midiStats.noteHistogram.set(midiEvent.note, currentCount + 1);\r\n\r\n        if (cumulativeSeconds > midiStats.lastNoteOnEventInSeconds) {\r\n            midiStats.lastNoteOnEventInSeconds = cumulativeSeconds;\r\n        }\r\n\r\n        if (midiEvent.note > midiStats.highNote || midiStats.highNote === MidiNote.None) {\r\n            midiStats.highNote = midiEvent.note;\r\n        }\r\n\r\n        if (midiEvent.note < midiStats.lowNote || midiStats.lowNote === MidiNote.None) {\r\n            midiStats.lowNote = midiEvent.note;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Basic MIDI file parser based on http://www.somascape.org/midi/tech/mfile.html\r\n */\r\nexport default class MidiFile {\r\n    public chunks: IMidiChunk[] = [];\r\n\r\n    public header?: MidiHeader;\r\n    public tracks: MidiTrack[] = []\r\n\r\n    public midiStats: IMidiStats;\r\n\r\n    constructor() {\r\n        this.midiStats = this.getInitialMidiStats();\r\n    }\r\n\r\n    public loadFromBuffer(buffer: ArrayBuffer) {\r\n        this.chunks = [];\r\n        this.midiStats = this.getInitialMidiStats();\r\n\r\n        let currentPos: number = 0;\r\n        let dataView = new DataView(buffer);\r\n\r\n        while (currentPos < buffer.byteLength) {\r\n            // First 8 bytes of the chunk are chunk header\r\n            // Read chunk type (4 bytes);\r\n            const chunkType = getStringFromBuffer(buffer, currentPos, currentPos + 4);\r\n            currentPos += 4;\r\n\r\n            // Read length of chunk (4 bytes, big-endian)\r\n            const chunkLength = dataView.getUint32(currentPos, /* littleEndian: */ false);\r\n            currentPos += 4;\r\n\r\n            const chunkDataStartOffset = currentPos;\r\n            switch (chunkType) {\r\n                case 'MThd':\r\n                    const header = new MidiHeader(dataView, chunkDataStartOffset, chunkLength);\r\n                    this.header = header;\r\n                    this.chunks.push(header);\r\n                    break;\r\n\r\n                case 'MTrk':\r\n                    const track = new MidiTrack(this.chunks[0] as MidiHeader, dataView, chunkDataStartOffset, chunkLength, this.midiStats);\r\n                    // This is a track\r\n                    this.tracks.push(track);\r\n                    this.chunks.push(track);\r\n                    break;\r\n\r\n                default:\r\n                    // Unrecognized chunk, skip\r\n                    break;\r\n            }\r\n            currentPos += chunkLength;\r\n        }\r\n    }\r\n\r\n    public getHeader(): MidiHeader {\r\n        // TODO clean up public props\r\n        if (this.header) {\r\n            return this.header;\r\n        }\r\n\r\n        throw new Error('No header found!');\r\n    }\r\n\r\n    public getTracks(): MidiTrack[] {\r\n        // TODO clean up public props\r\n        return this.tracks;\r\n    }\r\n\r\n    private getInitialMidiStats(): IMidiStats {\r\n        return {\r\n            noteHistogram: new Map<MidiNote, number>(),\r\n            highNote: MidiNote.None,\r\n            lowNote: MidiNote.None,\r\n            lastNoteOnEventInSeconds: 0,\r\n            tempos: [],\r\n            secondsPerTickValues: []\r\n        };\r\n    }\r\n}\r\n\r\nfunction getStringFromBuffer(buffer: ArrayBuffer, start: number, end: number): string {\r\n    const slice = buffer.slice(start, end);\r\n    return String.fromCharCode.apply(null, Array.from(new Uint8Array(slice)));\r\n}","import * as React from 'react';\r\nimport { IMidiStats } from '../model/MidiFile';\r\nimport { MidiNote } from '../model/MidiConstants';\r\nimport { Colors } from \"@blueprintjs/core\";\r\n\r\nexport interface IMidiNoteHistogramProps {\r\n    midiStats: IMidiStats;\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nexport default function MidiNoteHistogram(props: IMidiNoteHistogramProps) {\r\n    const stats = props.midiStats;\r\n    const noteRange = stats.highNote - stats.lowNote + 1;\r\n    if (noteRange <= 0) {\r\n        return null;\r\n    }\r\n\r\n    const noteWidth = props.width / noteRange;\r\n\r\n    let bars: JSX.Element[] = [];\r\n    let noteAxis: JSX.Element[] = [];\r\n\r\n    // This will help scale the bars\r\n    let maxNoteCount = 0;\r\n\r\n    let sparseAxis = noteRange > 30;\r\n\r\n    for (let note = stats.lowNote; note <= stats.highNote; note++) {\r\n        const friendlyNote = MidiNote[note].replace('s', '#');\r\n\r\n        const xPosition = (note - stats.lowNote) * noteWidth;\r\n\r\n        const noteCount = stats.noteHistogram.get(note);\r\n        if (noteCount) {\r\n            bars.push(\r\n                <rect key={note} x={xPosition} width={noteWidth} y={0} height={noteCount} fill={Colors.BLUE1} >\r\n                    <title>{noteCount}</title>\r\n                </rect>\r\n            );\r\n\r\n            if (noteCount > maxNoteCount) { maxNoteCount = noteCount; }\r\n        }\r\n\r\n        if (sparseAxis && shouldSkipNoteInAxis(note, stats)) {\r\n            continue;\r\n        } else {\r\n            const textX = xPosition + noteWidth;\r\n            noteAxis.push(\r\n                <text\r\n                    key={note}\r\n                    transform={`rotate(-90,${textX},0)`}\r\n                    x={textX}\r\n                    y={0}\r\n                    fontSize='10'>\r\n                    {friendlyNote}\r\n                </text>\r\n            );\r\n        }\r\n    }\r\n\r\n    // 20 px reserved for axis\r\n    const yScale = (props.height - 20) / maxNoteCount;\r\n\r\n    return (\r\n        <svg width={props.width} height={props.height} >\r\n            <g transform={'translate(0 20) scale(1 ' + yScale + ')'}>\r\n                {bars}\r\n            </g>\r\n            <g transform={'translate(0 20)'}>\r\n                {noteAxis}\r\n            </g>\r\n        </svg>\r\n    );\r\n}\r\n\r\nfunction shouldSkipNoteInAxis(note: MidiNote, stats: IMidiStats) {\r\n    if (note > stats.lowNote && note < stats.highNote) {\r\n        // Low and high not always visible in axis\r\n        // If in sparse axis mode, skip every other note, and skip the ones\r\n        // next to the end labels.\r\n        if (note === stats.lowNote + 1 || note === stats.highNote - 1) {\r\n            return true;\r\n        }\r\n\r\n        // Skip every second axis laber otherwise\r\n        return (note - stats.lowNote) % 2 === 0;\r\n    }\r\n}","import './MidiFilePicker.css';\r\nimport * as React from 'react';\r\nimport { Card, FileInput, NonIdealState, H4, Callout, Text } from \"@blueprintjs/core\";\r\nimport MidiFile from '../model/MidiFile';\r\nimport { MidiNote } from '../model/MidiConstants';\r\nimport MidiNoteHistogram from './MidiNoteHistogram';\r\n\r\nexport interface IMidiFilePickerProps {\r\n    fileName?: string;\r\n    midiFile?: MidiFile;\r\n    onFileLoaded?(fileName: string, midiFile: MidiFile): void;\r\n}\r\n\r\nexport interface IMidiFilePickerState {\r\n    fileName?: string;\r\n    midiFile?: MidiFile;\r\n}\r\n\r\nexport default class MidiFilePicker extends React.Component<IMidiFilePickerProps, IMidiFilePickerState>{\r\n    constructor(props: IMidiFilePickerProps) {\r\n        super(props);\r\n        this.state = {\r\n            fileName: props.fileName,\r\n            midiFile: props.midiFile\r\n        };\r\n    }\r\n\r\n    public getCurrentFilename(): string | undefined {\r\n        return this.state.fileName;\r\n    }\r\n\r\n    private dropHandler(ev: React.DragEvent) {\r\n        // Prevent default behavior (Prevent file from being opened)\r\n        ev.preventDefault();\r\n\r\n        if (ev.dataTransfer.items) {\r\n            // Use DataTransferItemList interface to access the file(s)\r\n            for (let i = 0; i < ev.dataTransfer.items.length; i++) {\r\n                // If dropped items aren't files, reject them\r\n                if (ev.dataTransfer.items[i].kind === 'file') {\r\n                    let file = ev.dataTransfer.items[i].getAsFile();\r\n                    if (file) {\r\n                        this.openFile(file);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            // Use DataTransfer interface to access the file(s)\r\n            for (let i = 0; i < ev.dataTransfer.files.length; i++) {\r\n                const file = ev.dataTransfer.files[i];\r\n                if (file) {\r\n                    this.openFile(ev.dataTransfer.files[i]);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private handleInputChange(event: React.FormEvent<HTMLInputElement>) {\r\n        const target = event.currentTarget;\r\n        if (target.files && target.files.length > 0 && target.files[0]) {\r\n            this.openFile(target.files[0]);\r\n        }\r\n    }\r\n\r\n    private openFile(file: File) {\r\n        this.setState({ fileName: file.name });\r\n\r\n        var reader = new FileReader();\r\n        reader.onload = () => {\r\n            if (this.props.onFileLoaded && reader.result instanceof ArrayBuffer) {\r\n                const midiFile = new MidiFile();\r\n                midiFile.loadFromBuffer(reader.result);\r\n\r\n                this.setState({ midiFile: midiFile });\r\n\r\n                this.props.onFileLoaded(file.name, midiFile);\r\n            }\r\n        }\r\n\r\n        reader.readAsArrayBuffer(file);\r\n    }\r\n\r\n    private dragOverHandler(ev: React.DragEvent) {\r\n        // Prevent default behavior (Prevent file from being opened)\r\n        ev.stopPropagation();\r\n        ev.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        const action = !!this.state.midiFile\r\n            ? <FileInput text={this.state.fileName} buttonText={'Replace'} onInputChange={(ev) => this.handleInputChange(ev)} />\r\n            : <FileInput text={'Select a MIDI file'} onInputChange={(ev) => this.handleInputChange(ev)} />;\r\n\r\n        let content: JSX.Element;\r\n\r\n        if (this.state.midiFile) {\r\n            const stats = this.state.midiFile.midiStats;\r\n\r\n            const tempoInfo = 'Tempo: ' +\r\n                stats.tempos.map(x => parseFloat(x.toFixed(2))).join(', ') + ' bpm';\r\n\r\n            content =\r\n                <>\r\n                    <H4><Text ellipsize={true}>{this.state.fileName}</Text></H4>\r\n                    {action}\r\n                    <Callout>\r\n                        <p>{tempoInfo}; last note at {stats.lastNoteOnEventInSeconds.toFixed(2)} seconds </p>\r\n                        <p>High Note: {MidiNote[stats.highNote]}, Low Note: {MidiNote[stats.lowNote]} </p>\r\n                    </Callout>\r\n                    <MidiNoteHistogram width={320} height={80} midiStats={stats} />\r\n                </>;\r\n        } else {\r\n            content = <NonIdealState\r\n                icon={'import'}\r\n                title='No file loaded'\r\n                description={'Drag and drop or select a file below...'}\r\n                action={action}\r\n            />\r\n        }\r\n\r\n        return (\r\n            <Card id={'drop_zone'}\r\n                onDrop={(ev) => this.dropHandler(ev)}\r\n                onDragOver={(ev) => this.dragOverHandler(ev)}\r\n                className={'mb-midiFilePicker'}\r\n            >\r\n                {content}\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n","import MidiFile, { MidiTimingScheme, MidiFileFormat } from '../model/MidiFile';\r\nimport { ChannelMessageType } from '../model/MidiEvents';\r\nimport { MidiNote } from '../model/MidiConstants';\r\n\r\nexport default class MidiJsonConverter {\r\n    public static GetJson(midiFile: MidiFile): string {\r\n        return JSON.stringify(midiFile, prettyPrintReplacer, 4);\r\n    }\r\n}\r\n\r\n/**\r\n * Used to hide some properties, and to make others more readable (e.g., enums as strings)\r\n */\r\nfunction prettyPrintReplacer(key: string, value: any) {\r\n    switch (key) {\r\n        // Timing data is exposed as parsed properties, no need to output raw ArrayBuffer\r\n        case 'rawTimingData':\r\n            return undefined;\r\n\r\n        // Avoid serializing header references for now. More interested in tracks\r\n        case 'header':\r\n            return undefined;\r\n\r\n        case 'chunks':\r\n            return undefined;\r\n\r\n        case 'timingScheme':\r\n            return MidiTimingScheme[value];\r\n\r\n        case 'fileFormat':\r\n            return MidiFileFormat[value];\r\n\r\n        case 'channelMessageType':\r\n            return ChannelMessageType[value];\r\n\r\n        case 'note':\r\n            return MidiNote[value];\r\n\r\n        default:\r\n            return value;\r\n    }\r\n}","import './MusicBoxSvg.css';\r\n\r\nimport { IMusicBoxProfile } from \"../model/IMusicBoxProfile\";\r\nimport MidiFile, { MidiTrack, MidiFileFormat } from \"../model/MidiFile\";\r\nimport * as React from 'react';\r\nimport { NoteMidiEvent, ChannelMessageType } from \"../model/MidiEvents\";\r\nimport { MidiNote } from \"../model/MidiConstants\";\r\nimport { Callout } from \"@blueprintjs/core\";\r\nimport { IMusicBoxSvgFormatOptions } from \"../model/IMusicBoxSvgFormatOptions\";\r\n\r\nconst JIGSAW_WIDTH = 2;\r\nconst JIGSAW_OPENFACTOR = 0.3;\r\nconst JIGSAW_CLOSEFACTOR = 0.5;\r\nconst MAX_START_SKEW = 10;\r\n\r\nexport interface IMusicBoxSvgProps {\r\n    midiFile: MidiFile;\r\n\r\n    /**\r\n     * Profile of the music box for which to generate SVG.\r\n     */\r\n    musicBoxProfile: IMusicBoxProfile;\r\n\r\n    /**\r\n     * Options for pagination and formatting of generated layout.\r\n     */\r\n    formatting: IMusicBoxSvgFormatOptions;\r\n\r\n    /** The HTML element id for the <svg> element. */\r\n    elementId: string;\r\n}\r\n\r\n/** Used for paginating notes into multiple chunks. */\r\nexport interface IMidiEventPage {\r\n    /**\r\n     * Page number.\r\n     */\r\n    pageNum: number;\r\n\r\n    /**\r\n     * The reference 'origin' in seconds since the start of song for this page.\r\n     * Used to calculate offsets for events.\r\n     */\r\n    startTimeInSeconds: number;\r\n\r\n    /**\r\n     * The timestamp for the last event in this page.\r\n     */\r\n    endTimeInSeconds: number;\r\n\r\n    /**\r\n     * The note on events to render on this page.\r\n     */\r\n    midiEvents: NoteMidiEvent[];\r\n}\r\n\r\nexport default class MusicBoxSvg extends React.Component<IMusicBoxSvgProps, {}> {\r\n    // References to generated SVGs\r\n    private svgRefs: (SVGElement | null)[] = [];\r\n    private numPages: number = 0;\r\n\r\n    private errors: string[] = [];\r\n\r\n    public getNumPages(): number {\r\n        return this.numPages;\r\n    }\r\n\r\n    public getSvg(page: number): string | null {\r\n        const svgRef = this.svgRefs[page];\r\n        return svgRef ? svgRef.outerHTML : null;\r\n    }\r\n\r\n    public render() {\r\n        // TODO optimize this: recalc only needed on page settings changes\r\n        try {\r\n            const pages = this.paginateEvents();\r\n            this.numPages = pages.length;\r\n\r\n            const mbProfile = this.props.musicBoxProfile;\r\n            const supportedNotes = mbProfile.supportedNotes;\r\n\r\n            // Distance between two note lines\r\n            const noteGap: number = mbProfile.contentWidthMm / (mbProfile.supportedNotes.length - 1);\r\n            const noteOffsetY: number = (mbProfile.paperWidthMm - mbProfile.contentWidthMm) / 2;\r\n\r\n            // An index of the note's position from the top of the music box sheet.\r\n            const noteIndices: Map<MidiNote, number> = new Map<MidiNote, number>();\r\n            [...supportedNotes].sort().forEach((note, i) => {\r\n                noteIndices.set(note, supportedNotes.length - i - 1);\r\n            });\r\n\r\n            let totalPaperLength = 0;\r\n            pages.forEach(p => { totalPaperLength += (p.endTimeInSeconds - p.startTimeInSeconds) * mbProfile.millimetersPerSecond });\r\n\r\n            return (\r\n                <>\r\n                    <Callout intent={!this.errors ? 'success' : 'danger'}>\r\n                        {\r\n                            this.errors &&\r\n                            this.errors.map((e) => <p>{e}</p>)\r\n                        }\r\n                        {<p>Total paper length: {totalPaperLength.toFixed(2)} mm, width: {mbProfile.paperWidthMm} mm</p>}\r\n                    </Callout>\r\n                    {pages.map((page) => {\r\n                        return (\r\n                            <div className='mb-musicBoxSvgWrapper'>\r\n                                { this.generateSvgForPage(pages, page, noteIndices, noteGap, noteOffsetY)}\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </>\r\n            );\r\n        } catch (error) {\r\n            return (\r\n                <Callout intent='danger'>\r\n                    <p>Error encountered</p>\r\n                    <p>{JSON.stringify(error)}</p>\r\n                </Callout>\r\n            );\r\n        }\r\n    }\r\n\r\n    private generateSvgForPage(\r\n        pages: IMidiEventPage[],\r\n        page: IMidiEventPage,\r\n        noteIndices: Map<MidiNote, number>,\r\n        noteGap: number,\r\n        noteOffsetY: number): JSX.Element {\r\n\r\n        // The width of the leading pattern (for distinguishing first page)\r\n        const xLen = (page.endTimeInSeconds - page.startTimeInSeconds) * this.props.musicBoxProfile.millimetersPerSecond;\r\n        const yLen = this.props.musicBoxProfile.paperWidthMm;\r\n\r\n        // While paginating, the center of holes at the end of page align with page end,\r\n        // unless JIGSAW_WIDTH is greater\r\n        const svgXLength = xLen + (\r\n            this.props.musicBoxProfile.holeDiameterMm > JIGSAW_WIDTH\r\n                ? this.props.musicBoxProfile.holeDiameterMm\r\n                : JIGSAW_WIDTH\r\n        );\r\n\r\n        const formatOptions = this.props.formatting;\r\n        const drawLeadingBorder = (formatOptions && !formatOptions.omitPageBoundaries) || page.pageNum === 0;\r\n        const drawTrailingBorder = (formatOptions && !formatOptions.omitPageBoundaries) || page.pageNum === pages.length - 1; // last page\r\n\r\n        const pageSvg =\r\n            <svg key={page.pageNum}\r\n                width={svgXLength + 'mm'}\r\n                height={yLen + 'mm'}\r\n                ref={(el) => { this.svgRefs[page.pageNum] = el; }}\r\n                // Namespace required to tell browsers to render downloaded files instead of displaying xml.\r\n                xmlns={'http://www.w3.org/2000/svg'}>\r\n\r\n                <g>\r\n                    {\r\n                        formatOptions && formatOptions.renderBorder &&\r\n                        <>\r\n                            {this.renderSvgLineMm((page.pageNum === 0 && !this.props.formatting.loopMode) ? this.calculateStartSkew() : 0, 0, xLen, 0)}\r\n                            {this.renderSvgLineMm(0, yLen, xLen, yLen)}\r\n                            {\r\n                                drawLeadingBorder && this.renderLeadingBorder(yLen, /* isFirstPage: */page.pageNum === 0)\r\n                            }\r\n                            {\r\n                                drawTrailingBorder &&\r\n                                this.renderTrailingBorder(xLen, yLen, /* isLastPage: */ page.pageNum === pages.length - 1)\r\n                            }\r\n                        </>\r\n                    }\r\n                </g>\r\n                <g>\r\n                    {\r\n                        page.midiEvents.map((noteOnEvent, i) =>\r\n                            createCircle(\r\n                                /* key: */`${page.pageNum}_${i}`,\r\n                                noteOnEvent,\r\n                                noteIndices,\r\n                                noteGap,\r\n                                page.startTimeInSeconds,\r\n                                noteOffsetY,\r\n                                this.props.musicBoxProfile))\r\n                    }\r\n                </g>\r\n            </svg>;\r\n\r\n        return pageSvg;\r\n    }\r\n\r\n    private renderLeadingBorder(height: number, isFirstPage: boolean) {\r\n        if (isFirstPage && !this.props.formatting.loopMode) {\r\n            // Special kind of leading border to identify the start\r\n            const skewMm = this.calculateStartSkew();\r\n\r\n            return this.renderSvgLineMm(skewMm, 0, 0, height);\r\n        } else {\r\n            // Render jigsaw joiner so that it can join with previous page\r\n            // (also enabled in loop mode for first page)\r\n            return this.renderJigsawJoiner(\r\n                /* xStart: */0,\r\n                height\r\n            );\r\n        }\r\n    }\r\n\r\n    private calculateStartSkew() {\r\n        return this.props.formatting.startPaddingMm < MAX_START_SKEW ?\r\n            this.props.formatting.startPaddingMm :\r\n            MAX_START_SKEW;\r\n    }\r\n\r\n    private renderTrailingBorder(xLen: number, yLen: number, isLastPage: boolean) {\r\n        if (isLastPage && !this.props.formatting.loopMode) {\r\n            // Just a boring straight line\r\n            return this.renderSvgLineMm(xLen, 0, xLen, yLen);\r\n        } else {\r\n            // Jigsaw joiner to connect to next page\r\n            // Also enabled for last page in loop mode\r\n            return this.renderJigsawJoiner(xLen, yLen)\r\n        }\r\n    }\r\n\r\n    private renderSvgLineMm(x1: number, y1: number, x2: number, y2: number) {\r\n        return <line x1={x1 + 'mm'} y1={y1 + 'mm'} x2={x2 + 'mm'} y2={y2 + 'mm'} stroke='black' />;\r\n    }\r\n\r\n    private renderJigsawJoiner(xStart: number, height: number) {\r\n        // The gap on either side between content area and paper edge\r\n        const profile = this.props.musicBoxProfile;\r\n        const gap = 0.5 * (profile.paperWidthMm - profile.contentWidthMm - profile.holeDiameterMm);\r\n\r\n        const a = JIGSAW_OPENFACTOR; // open factor\r\n        const b = JIGSAW_CLOSEFACTOR; // close factor\r\n\r\n        const h = 0.5 * gap; // half gap\r\n\r\n        const points = [\r\n            // lower half\r\n            { x: xStart, y: 0 },\r\n            { x: xStart, y: h - a * h },\r\n            { x: xStart + JIGSAW_WIDTH, y: h - b * h },\r\n            { x: xStart + JIGSAW_WIDTH, y: h + b * h },\r\n            { x: xStart, y: h + a * h },\r\n\r\n            // upper half\r\n            { x: xStart, y: height - h - a * h },\r\n            { x: xStart + JIGSAW_WIDTH, y: height - h - b * h },\r\n            { x: xStart + JIGSAW_WIDTH, y: height - h + b * h },\r\n            { x: xStart, y: height - h + a * h },\r\n            { x: xStart, y: height }\r\n        ]\r\n\r\n        var lines: JSX.Element[] = [];\r\n\r\n        for (let i = 0; i < points.length - 1; i++) {\r\n            const p = points[i];\r\n            const q = points[i + 1];\r\n            lines.push(this.renderSvgLineMm(p.x, p.y, q.x, q.y));\r\n        }\r\n\r\n        return <>{lines}</>\r\n    }\r\n\r\n    private paginateEvents(): IMidiEventPage[] {\r\n        const pages: IMidiEventPage[] = [];\r\n\r\n        const mbProfile = this.props.musicBoxProfile;\r\n        const supportedNotes = mbProfile.supportedNotes;\r\n        const supportedNoteSet: Set<MidiNote> = new Set(supportedNotes);\r\n\r\n        // An index of the note's position from the top of the music box sheet.\r\n        const noteIndices: Map<MidiNote, number> = new Map<MidiNote, number>();\r\n        [...supportedNotes].sort().forEach((note, i) => {\r\n            noteIndices.set(note, supportedNotes.length - i - 1);\r\n        });\r\n\r\n        const supportedEvents: NoteMidiEvent[] = [];\r\n        const unsupportedEvents: NoteMidiEvent[] = [];\r\n\r\n        this.errors = [];\r\n\r\n        if (!this.props.midiFile.getTracks()) {\r\n            this.errors.push('No tracks found!');\r\n        }\r\n\r\n        // Filter notes bases on what'supported by the music box.\r\n        // Transpose unsupported notes if possible/desired .\r\n        this.filterNotes(supportedNoteSet, supportedEvents, unsupportedEvents);\r\n        if (unsupportedEvents.length > 0) {\r\n            this.errors.push(`Unsupported notes found: ${unsupportedEvents.length} total. Inspect MIDI file or music box profile`);\r\n        }\r\n\r\n        const formatOptions = this.props.formatting;\r\n        const musicBoxProfile = this.props.musicBoxProfile;\r\n\r\n        let pageLengthInSeconds = Infinity;\r\n        if (formatOptions.pageWidthMm > 0) {\r\n            pageLengthInSeconds = formatOptions.pageWidthMm / this.props.musicBoxProfile.millimetersPerSecond\r\n        }\r\n\r\n        let currentPage: IMidiEventPage = {\r\n            // Add padding on the first page (set negative start time)\r\n            startTimeInSeconds: -(formatOptions.startPaddingMm + musicBoxProfile.holeDiameterMm * 0.5)\r\n                / musicBoxProfile.millimetersPerSecond,\r\n            endTimeInSeconds: 0,\r\n            midiEvents: [],\r\n            pageNum: 0,\r\n        };\r\n\r\n        pages.push(currentPage);\r\n\r\n        const secondsPerHoleRadius = musicBoxProfile.holeDiameterMm * 0.5 / musicBoxProfile.millimetersPerSecond;\r\n        const minNoteGapSeconds = musicBoxProfile.minNoteGapMm / musicBoxProfile.millimetersPerSecond;\r\n\r\n        let currentNoteIndex = 0;\r\n        let skippedNotes = new Map<MidiNote, number>();\r\n        let skipCount = 0;\r\n        let previousNoteEvent: NoteMidiEvent | null = null;\r\n\r\n        while (currentNoteIndex < supportedEvents.length) {\r\n            const noteEvent = supportedEvents[currentNoteIndex];\r\n            const maxPageEndTime = currentPage.startTimeInSeconds + pageLengthInSeconds;\r\n\r\n            // Coalesce/skip notes that are too close\r\n            if (previousNoteEvent &&\r\n                previousNoteEvent.note === noteEvent.note &&\r\n                noteEvent.absTimeSeconds <= previousNoteEvent.absTimeSeconds + minNoteGapSeconds\r\n            ) {\r\n                skippedNotes.set(noteEvent.note, skippedNotes.get(noteEvent.note) ?? 0 + 1);\r\n                skipCount++;\r\n                currentNoteIndex++;\r\n                continue;\r\n            }\r\n\r\n            // Pagination\r\n            if (noteEvent.absTimeSeconds + 0.5 * secondsPerHoleRadius > maxPageEndTime) {\r\n                // Doesn't fit in current page\r\n                if (previousNoteEvent) {\r\n                    // Try to center the page boder between notes on both sides, as much as possible\r\n                    const optimalPageEndTime = 0.5 * (previousNoteEvent.absTimeSeconds + noteEvent.absTimeSeconds);\r\n                    const pageEndTime = (optimalPageEndTime > maxPageEndTime) ? maxPageEndTime : optimalPageEndTime;\r\n\r\n                    // Finish current page\r\n                    currentPage.endTimeInSeconds = pageEndTime;\r\n\r\n                    // Start a new page\r\n                    currentPage = {\r\n                        startTimeInSeconds: pageEndTime,\r\n                        endTimeInSeconds: 0,\r\n                        midiEvents: [],\r\n                        pageNum: currentPage.pageNum + 1,\r\n                    };\r\n\r\n                    pages.push(currentPage);\r\n                    previousNoteEvent = null;\r\n                }\r\n                else {\r\n                    throw new Error('Page size too small to handle gaps between notes.');\r\n                }\r\n            }\r\n\r\n            currentPage.midiEvents.push(noteEvent);\r\n            currentNoteIndex++;\r\n            previousNoteEvent = noteEvent;\r\n        }\r\n\r\n        // Finish last page\r\n        if (previousNoteEvent) {\r\n            currentPage.endTimeInSeconds = previousNoteEvent.absTimeSeconds;\r\n        } else {\r\n            throw new Error('No supported MIDI notes!');\r\n        }\r\n\r\n        // If there's room, add upto 0.5 seconds of padding\r\n        const secsRemainingOnLastPage = pageLengthInSeconds -\r\n            (currentPage.endTimeInSeconds - currentPage.startTimeInSeconds);\r\n\r\n        if (secsRemainingOnLastPage > 0.5 || pageLengthInSeconds === Infinity) {\r\n            currentPage.endTimeInSeconds += 0.5;\r\n        } else if (secsRemainingOnLastPage > 0) {\r\n            currentPage.endTimeInSeconds += secsRemainingOnLastPage;\r\n        }\r\n\r\n        // Add error about skipped notes\r\n        this.errors.push(`${skipCount} notes skipped (too close). Try increasing mm/sec. MIDI may contain overlapping notes.`);\r\n\r\n        return pages;\r\n    }\r\n\r\n    private filterNotes(supportedNoteSet: Set<MidiNote>, supportedEvents: NoteMidiEvent[], unsupportedEvents: NoteMidiEvent[]) {\r\n        const midiHeader = this.props.midiFile.getHeader();\r\n        const midiTracks = this.props.midiFile.getTracks();\r\n        const musicTrack: MidiTrack = midiHeader.fileFormat === MidiFileFormat.multiTrack\r\n            ? midiTracks[1] // First track is tempor track for type 1 MIDI files\r\n            : midiTracks[0];\r\n\r\n        const noteOnEvents: NoteMidiEvent[] = musicTrack.events.filter(e => e instanceof NoteMidiEvent &&\r\n            (e as NoteMidiEvent).channelMessageType === ChannelMessageType.NoteOn) as NoteMidiEvent[];\r\n\r\n        // Build a note transpose mapping incrementally as needed\r\n        let transposeMemo = new Map<MidiNote, MidiNote>();\r\n        let transposedCount = 0;\r\n\r\n        let lastAbsoluteTime: number = 0;\r\n        noteOnEvents.forEach(e => {\r\n            if (this.props.formatting.transposeOutOfRangeNotes) {\r\n                if (!supportedNoteSet.has((e.note))) {\r\n                    // Build transpose memo incrementally\r\n                    if (!transposeMemo.has(e.note)) {\r\n                        // Find the first supported note that is an integer octave from the note\r\n                        let transposeCandidate: MidiNote | null = null;\r\n                        for (let suppNote of Array.from(supportedNoteSet)) {\r\n                            if ((suppNote - e.note) % 12 === 0) {\r\n                                transposeCandidate = suppNote;\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        if (transposeCandidate) {\r\n                            transposeMemo.set(e.note, transposeCandidate);\r\n                        }\r\n                    }\r\n\r\n                    const transposed = transposeMemo.get(e.note);\r\n                    if (transposed) {\r\n                        e.note = transposed;\r\n                        transposedCount++;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (supportedNoteSet.has((e.note))) {\r\n                supportedEvents.push(e);\r\n                if (e.absTimeSeconds > lastAbsoluteTime) {\r\n                    lastAbsoluteTime = e.absTimeSeconds;\r\n                }\r\n            }\r\n            else {\r\n                unsupportedEvents.push(e);\r\n            }\r\n        });\r\n\r\n        this.errors.push(`${transposedCount} notes transposed.`);\r\n    }\r\n}\r\n\r\nfunction createCircle(\r\n    key: string,\r\n    midiEvent: NoteMidiEvent,\r\n    noteIndices: Map<MidiNote, number>,\r\n    noteGap: number,\r\n    startTimeInSeconds: number,\r\n    noteOffsetY: number,\r\n    musicBoxProfile: IMusicBoxProfile): JSX.Element {\r\n\r\n    const noteIndex = noteIndices.get(midiEvent.note) || 0;\r\n\r\n    return <circle key={key}\r\n        cx={(midiEvent.absTimeSeconds - startTimeInSeconds) * musicBoxProfile.millimetersPerSecond + \"mm\"}\r\n        cy={noteOffsetY + noteIndex * noteGap + \"mm\"}\r\n        r={musicBoxProfile.holeDiameterMm / 2 + \"mm\"}\r\n        fill={'none'}\r\n        stroke={'black'}\r\n    />;\r\n}","import { MidiNote } from \"./MidiConstants\";\r\n\r\n/**\r\n * Properties pertaining to the paper tape's width and supported notes for music box.\r\n */\r\nexport interface IMusicBoxProfile {\r\n    /** Friendly name for the profile (e.g., for display on the UI) */\r\n    name: string;\r\n\r\n    /** Total width of the music box's paper tape, in millimeters. */\r\n    paperWidthMm: number;\r\n\r\n    /**\r\n     * Total width (mm) of the area within the paper where notes can be drawn/punched.\r\n     * Basically the distance between the first and the last \"note line\" in the paper tape.\r\n     * */\r\n    contentWidthMm: number;\r\n\r\n    /**\r\n     * The list of notes supported by the music box.\r\n     */\r\n    supportedNotes: MidiNote[];\r\n\r\n    /**\r\n     * The optimal diameter of punched holes, in millimeters.\r\n     */\r\n    holeDiameterMm: number;\r\n\r\n    /**\r\n     * The ideal length in paper for one second of music.\r\n     */\r\n    millimetersPerSecond: number;\r\n\r\n    /**\r\n     * The minimum acceptable gap between two notes on the same line.\r\n     */\r\n    minNoteGapMm: number;\r\n}\r\n\r\nexport const BuiltInProfiles: { [key: string]: IMusicBoxProfile } = {\r\n    'fifteenNote': {\r\n        name: '15 Note',\r\n        paperWidthMm: 41,\r\n        contentWidthMm: 29,\r\n        supportedNotes: [\r\n            MidiNote.C4, MidiNote.D4, MidiNote.E4, MidiNote.F4, MidiNote.G4, MidiNote.A4,\r\n            MidiNote.B4, MidiNote.C5, MidiNote.D5, MidiNote.E5, MidiNote.F5, MidiNote.G5,\r\n            MidiNote.A5, MidiNote.B5, MidiNote.C6\r\n        ],\r\n        holeDiameterMm: 1.8,\r\n        millimetersPerSecond: 20,\r\n        minNoteGapMm: 3\r\n    },\r\n\r\n    'thirtyNote': {\r\n        name: '30 Note',\r\n        paperWidthMm: 70.1,\r\n        contentWidthMm: 58.25,\r\n        supportedNotes: [\r\n            MidiNote.C3, MidiNote.D3, MidiNote.G3, MidiNote.A3, MidiNote.B3, MidiNote.C4,\r\n            MidiNote.D4, MidiNote.E4, MidiNote.F4, MidiNote.Fs4, MidiNote.G4, MidiNote.Gs4,\r\n            MidiNote.A4, MidiNote.As4, MidiNote.B4, MidiNote.C5, MidiNote.Cs5, MidiNote.D5,\r\n            MidiNote.Ds5, MidiNote.E5, MidiNote.F5, MidiNote.Fs5, MidiNote.G5, MidiNote.Gs5,\r\n            MidiNote.A5, MidiNote.As5, MidiNote.B5, MidiNote.C6, MidiNote.D6, MidiNote.E6\r\n        ],\r\n        holeDiameterMm: 2,\r\n        millimetersPerSecond: 20,\r\n        minNoteGapMm: 3\r\n    }\r\n}","import './Common.css';\r\nimport { IMusicBoxProfile, BuiltInProfiles } from '../model/IMusicBoxProfile';\r\nimport React, { useState } from 'react';\r\nimport { Card, NumericInput, Button, Label, H4, Callout, Menu, MenuItem, Popover, Position } from '@blueprintjs/core';\r\nimport { MidiNote } from '../model/MidiConstants';\r\n\r\nexport interface IMusicBoxProfileEditorProps {\r\n    profile: IMusicBoxProfile;\r\n    onChange(profile: IMusicBoxProfile): void;\r\n}\r\n\r\nexport function MusicBoxProfileEditor(props: IMusicBoxProfileEditorProps) {\r\n    const [profile, setProfile] = useState(props.profile);\r\n\r\n    const onApplyProfile = () => {\r\n        if (props.onChange) {\r\n            props.onChange(profile);\r\n        }\r\n    }\r\n\r\n    const onSelectProfile = (profileKey: string) => {\r\n        const newProfile = { ...BuiltInProfiles[profileKey] };\r\n        setProfile(newProfile);\r\n        if (props.onChange) {\r\n            props.onChange(newProfile);\r\n        }\r\n    }\r\n\r\n    let menuItems: JSX.Element[] = [];\r\n    for (const profile in BuiltInProfiles) {\r\n        menuItems.push(\r\n            <MenuItem key={profile} text={BuiltInProfiles[profile].name} onClick={() => onSelectProfile(profile)} />);\r\n    }\r\n\r\n    const profileSelectionMenu = <Menu>{menuItems} </Menu>;\r\n    const profileSelectionPopOver =\r\n        <Popover content={profileSelectionMenu} position={Position.BOTTOM}>\r\n            <Button icon=\"document-open\" text=\"Select profile...\" />\r\n        </Popover>;\r\n\r\n    return (\r\n        <Card className={'mb-MusicBoxProfileEditor'}>\r\n            <H4><span>{profileSelectionPopOver} Music Box Profile: {profile.name}</span></H4>\r\n            <div className={'mb-settingLayout'}>\r\n                <div className={'mb-settingGroup'}>\r\n                    <Label>\r\n                        Paper width (mm)\r\n                        <NumericInput\r\n                            value={profile.paperWidthMm}\r\n                            onValueChange={(num, str) => { setProfile({ ...profile, paperWidthMm: num }) }} />\r\n                    </Label>\r\n                    <Label>\r\n                        Content width (mm)\r\n                        <NumericInput\r\n                            value={profile.contentWidthMm}\r\n                            onValueChange={(num, str) => { setProfile({ ...profile, contentWidthMm: num }) }} />\r\n                    </Label>\r\n                    <Label>\r\n                        Minimum Note Gap (mm)\r\n                        <NumericInput\r\n                            value={profile.minNoteGapMm}\r\n                            onValueChange={(num, str) => { setProfile({ ...profile, minNoteGapMm: num }) }} />\r\n                    </Label>\r\n                </div>\r\n                <div className={'mb-settingGroup'}>\r\n                    <Label>\r\n                        Millimeters per second\r\n                        <NumericInput\r\n                            value={profile.millimetersPerSecond}\r\n                            onValueChange={(num, str) => { setProfile({ ...profile, millimetersPerSecond: num }) }} />\r\n                    </Label>\r\n                    <Label>\r\n                        Hole diameter (mm)\r\n                        <NumericInput\r\n                            value={profile.holeDiameterMm}\r\n                            onValueChange={(num, str) => { setProfile({ ...profile, holeDiameterMm: num }) }} />\r\n                    </Label>\r\n                    <Button onClick={onApplyProfile}>Apply</Button>\r\n                </div>\r\n                <div className={'mb-settingGroup'}>\r\n                    <Callout>\r\n                        Supported Notes: {profile.supportedNotes.map(x => MidiNote[x].replace('s', '#')).join(', ')}\r\n                    </Callout>\r\n                </div>\r\n            </div>\r\n        </Card>\r\n    );\r\n}","import './Common.css';\r\nimport React, { useState } from 'react';\r\nimport { Card, NumericInput, Button, Label, H4, Checkbox } from '@blueprintjs/core';\r\nimport { IMusicBoxSvgFormatOptions } from \"../model/IMusicBoxSvgFormatOptions\";\r\n\r\nexport interface IMusicBoxSvgFormatEditorProps {\r\n    options: IMusicBoxSvgFormatOptions;\r\n    onChange(options: IMusicBoxSvgFormatOptions): void;\r\n}\r\n\r\nexport function MusicBoxSvgFormatEditor(props: IMusicBoxSvgFormatEditorProps) {\r\n    const [options, setOptions] = useState(props.options);\r\n\r\n    const onApplyChanges = () => {\r\n        if (props.onChange) {\r\n            props.onChange(options);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card>\r\n            <H4><span>SVG Formatting Options</span></H4>\r\n            <div className={'mb-settingLayout'}>\r\n                <div className={'mb-settingGroup'}>\r\n                    <Label>\r\n                        Maximum Page width (mm)\r\n                    <NumericInput\r\n                            value={options.pageWidthMm}\r\n                            onValueChange={(num) => { setOptions({ ...options, pageWidthMm: num }) }} />\r\n                    </Label>\r\n                    <Label>\r\n                        Start padding (mm)\r\n                    <NumericInput\r\n                            value={options.startPaddingMm}\r\n                            onValueChange={(num) => { setOptions({ ...options, startPaddingMm: num }) }} />\r\n                    </Label>\r\n                    <Button onClick={onApplyChanges}>Apply</Button>\r\n                </div>\r\n                <div className={'mb-settingGroup'}>\r\n                    <Checkbox checked={options.renderBorder} label={'Render border'} onChange={() => { setOptions({ ...options, renderBorder: !options.renderBorder }) }} />\r\n                    <Checkbox checked={options.omitPageBoundaries} label={'Omit page boundaries'} onChange={() => { setOptions({ ...options, omitPageBoundaries: !options.omitPageBoundaries }) }} />\r\n                    <Checkbox checked={options.transposeOutOfRangeNotes} label={'Transpose out of range notes'} onChange={() => { setOptions({ ...options, transposeOutOfRangeNotes: !options.transposeOutOfRangeNotes }) }} />\r\n                    <Checkbox checked={options.loopMode} label={'Loop mode'} onChange={() => { setOptions({ ...options, loopMode: !options.loopMode }) }} />\r\n                </div>\r\n            </div>\r\n        </Card>\r\n    );\r\n}","import React from 'react';\nimport './MusicBoxSheetGenerator.css';\nimport MidiFilePicker from './components/MidiFilePicker';\nimport MidiFile from './model/MidiFile';\nimport MidiJsonConverter from './utilities/MidiJsonConverter';\nimport MusicBoxSvg from './components/MusicBoxSvg';\nimport { IMusicBoxSvgFormatOptions } from \"./model/IMusicBoxSvgFormatOptions\";\nimport { BuiltInProfiles, IMusicBoxProfile } from './model/IMusicBoxProfile';\nimport { MusicBoxProfileEditor } from './components/MusicBoxProfileEditor';\n\nimport { Card, Collapse, Pre, Button, Divider, NonIdealState, ButtonGroup } from '@blueprintjs/core';\nimport { MusicBoxSvgFormatEditor } from './components/MusicBoxSvgFormatEditor';\nimport { Tab, Tabs } from \"@blueprintjs/core\";\n\nconst CREDITS = [\n  { asset: 'Midi Icon', by: 'Midi Synthesizer by Iconic from the Noun Project' }\n]\n\ninterface IAppState {\n  midiJson: string;\n  fileName?: string;\n  midiFile?: MidiFile;\n  midiDataAvailable: boolean;\n  musicBoxProfile: IMusicBoxProfile;\n  musicBoxSvgFormatOptions: IMusicBoxSvgFormatOptions;\n  showMidiJson: boolean;\n}\n\nexport default class MusicBoxSheetGenerator extends React.Component<{}, IAppState> {\n  private musicBoxSvgRef: MusicBoxSvg | null;\n\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      midiJson: '',\n      midiDataAvailable: false,\n      musicBoxProfile: BuiltInProfiles['thirtyNote'],\n      musicBoxSvgFormatOptions: {\n        pageWidthMm: 200,\n        startPaddingMm: 10,\n        renderBorder: true,\n        omitPageBoundaries: false,\n        transposeOutOfRangeNotes: true,\n        loopMode: false\n      },\n      showMidiJson: false\n    };\n\n    this.musicBoxSvgRef = null;\n  }\n\n  render() {\n    const credits = CREDITS.map((x, i) => {\n      return (\n        <div key={i}>\n          <span>{x.asset}: </span><span>{x.by}</span>\n        </div>\n      );\n    })\n\n    let filePicker: JSX.Element =\n      <div className='mb-settingsTab-container'>\n        <MidiFilePicker\n          fileName={this.state.fileName}\n          midiFile={this.state.midiFile}\n          onFileLoaded={(filename, midiFile) => this.onMidiDataLoaded(filename, midiFile)}\n        />\n      </div>;\n\n    let paperSettings: JSX.Element =\n      <div className='mb-settingsTab-container'>\n        <MusicBoxProfileEditor\n          profile={this.state.musicBoxProfile}\n          onChange={(profile) => this.setState({ ...this.state, musicBoxProfile: profile })} />\n      </div>;\n\n    let formatSettings: JSX.Element = <></>;\n    //if (this.state.midiDataAvailable && this.state.midiFile) {\n    if (true) {\n      formatSettings =\n        <div className='mb-settingsTab-container'>\n          <MusicBoxSvgFormatEditor\n            options={this.state.musicBoxSvgFormatOptions}\n            onChange={(options) => this.setState({ ...this.state, musicBoxSvgFormatOptions: options })} />\n        </div>\n    } else {\n      formatSettings =\n        <div className='mb-settingsTab-container'>\n          <Card>\n            <NonIdealState\n              icon={\"error\"}\n              title=\"No file loaded\"\n              description={\"Load a MIDI file to generate layout\"}\n              action={undefined}\n            />\n          </Card>\n        </div>;\n    }\n\n    return (\n      <div className='mb-appRoot'>\n        <div className='mb-settingsArea'>\n\n          <Tabs\n            animate={true}\n            id=\"settings-tabs\"\n            key={\"settings-tabs\"}\n            renderActiveTabPanelOnly={true}\n            vertical={true}\n          >\n            <Tab id=\"file-picker-tab\" title=\"MIDI File\" panel={filePicker} />\n            <Tab id=\"paper-settings-tab\" title=\"Paper/Music Box Settings\" panel={paperSettings} />\n            <Tab id=\"format-settings-tab\" title=\"Layout/Pagination\" panel={formatSettings} />\n            <Tabs.Expander />\n          </Tabs>\n\n        </div>\n        <Divider />\n        {\n          this.state.midiDataAvailable && this.state.midiFile &&\n          <div className='mb-musicBox-preview'>\n            <MusicBoxSvg\n              ref={(el) => { this.musicBoxSvgRef = el; }}\n              musicBoxProfile={this.state.musicBoxProfile}\n              formatting={this.state.musicBoxSvgFormatOptions}\n              midiFile={this.state.midiFile}\n              elementId={'mb-musicBoxSvg'} />\n          </div>\n        }\n        <div className='mb-debugMessage-Container'>\n          {\n            this.state.midiDataAvailable &&\n            <>\n              <ButtonGroup style={{ minWidth: 200 }}>\n                <Button\n                  icon={'download'}\n                  text={'Download SVG(s)'}\n                  onClick={() => { this.downloadSvgs() }}\n                />\n                <Button onClick={() => this.toggleDebugMessage()}>\n                  {this.state.showMidiJson ? \"Hide\" : \"Show\"} MIDI JSON\n                </Button>\n                <Button icon={'export'} onClick={() => this.copyMidiJson()}>\n                  Copy MIDI Json\n                </Button>\n              </ButtonGroup>\n              <Collapse isOpen={this.state.showMidiJson}>\n                <Pre className='mb-debugMessage'>{this.state.midiJson}</Pre>\n              </Collapse>\n              <Divider />\n            </>\n          }\n          <Card>\n            Code is available in <a href=\"https://github.com/SabinT/musicbox-svg\">github</a><br />\n            Credits<br />\n            {credits}\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  private onMidiDataLoaded(fileName: string, midiFile: MidiFile) {\n    this.setState({\n      midiFile: midiFile,\n      fileName: fileName,\n      midiJson: MidiJsonConverter.GetJson(midiFile),\n      midiDataAvailable: true\n    });\n  }\n\n  private downloadSvgs() {\n    if (this.musicBoxSvgRef) {\n      const numPages = this.musicBoxSvgRef.getNumPages();\n\n      for (let i = 0; i < numPages; i++) {\n        const svgData = this.musicBoxSvgRef.getSvg(i);\n        if (svgData) {\n          const svgBlob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });\n          const svgUrl = URL.createObjectURL(svgBlob);\n          const downloadLink = document.createElement('a');\n          downloadLink.href = svgUrl;\n\n          const midiFileName = this.state.fileName ?? 'musicBox';\n\n          downloadLink.download = `${midiFileName}_page_${i}.svg`;\n\n          document.body.appendChild(downloadLink);\n          downloadLink.click();\n          document.body.removeChild(downloadLink);\n        }\n      }\n    }\n  }\n\n  private copyMidiJson(): void {\n    navigator.clipboard.writeText(this.state.midiJson);\n  }\n\n  private toggleDebugMessage(): void {\n    this.setState({ ...this.state, showMidiJson: !this.state.showMidiJson });\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MusicBoxSheetGenerator from './MusicBoxSheetGenerator';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MusicBoxSheetGenerator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}